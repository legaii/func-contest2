{-

  TASK 5 - Address encoder
  Write the method that for any valid MsgAddressInt with addr_std constructor
  without anycast
  (see https://github.com/ton-blockchain/ton/blob/master/crypto/block/block.tlb#L105)
 returns the slice that contain ASCII encoded base64url user-friendly bouncable
 address (without test-only flag), see https://ton.org/docs/#/howto/step-by-step?id=_1-smart-contract-addresses
-}

() recv_internal() {
}

;; https://stackoverflow.com/questions/17196743/crc-ccitt-implementation
int crc16_ccitt(slice s) {
  int crc = 0;
  while (~(s.slice_empty?())) {
    int x = s~load_uint(8);
    if (x >= 0x80) {
      x |= 0xff00;
    }
    x <<= 8;
    x &= 0xffff;
    crc ^= x;
    repeat (8) {
      int xor_flag = crc & 0x8000;
      crc <<= 1;
      crc &= 0xffff;
      if (xor_flag) {
        crc ^= 0x1021;
      }
    }
  }
  return crc;
}

slice user_friendly(int workchain_id, slice address) {
  builder b = begin_cell()
    .store_uint(0x11, 8)
    .store_int(workchain_id, 8)
    .store_slice(address);
  b~store_uint(b.end_cell().begin_parse().crc16_ccitt(), 16);
  return b.end_cell().begin_parse();
}

int base64url_one(int x) {
  if (x < 26) {
    return 0x41 + x;
  }
  if (x < 52) {
    return 0x61 + (x - 26);
  }
  if (x < 62) {
    return 0x30 + (x - 52);
  }
  if (x == 62) {
    return 0x2d;
  }
  return 0x5f;
}

slice base64url(slice s) {
  builder b = begin_cell();
  while (~(s.slice_empty?())) {
    b~store_uint(s~load_uint(6).base64url_one(), 8);
  }
  return b.end_cell().begin_parse();
}

;; testable
(slice) encode_address(slice Address) method_id {
  Address~skip_bits(3);
  int workchain_id = Address~load_int(8);
  slice address = Address~load_bits(256);
  return user_friendly(workchain_id, address).base64url();
}
